#!/usr/bin/env bash

show_help() {
cat <<EOF | >&2 sed 's/^|//'
|Usage: sshrc [OPTIONS] [SSH_ARGS...]
|
|Options:
|  --archiver=UTILITY  Use UTILITY for compression
|                      Default is bzip2; gzip and xz are also supported
|  --arg-max=BYTES     Ensure SSHRC_CMD is less than BYTES in size
|                      Default is 65536 (64kb); set to 0 to disable this check
|  --arg-size          Print the compressed size of SSHRC_CMD in bytes and exit
|  --hushlogin         Supress motd welcome messages
|                      This can also be accomplished by creating a .hushlogin
|                      file ing \$SSHHOME/.sshrc.d
|  --no-bin            Don't copy this sshrc script to the remote host
|  --debug[=LEVEL]     Print out debug info
|                      LEVEL 1 prints the SSHRC_CMD
|                      LEVEL 2 prints the uncompressed bootstrap script
|  -h, --help          Display this help message and exit
|
|SSH_ARGS:
|  See ssh(1)
EOF
}

# Use openssl or base64
encode() {
  if [ "$(command -v openssl)" ]; then
    openssl enc -base64
  elif [ "$(command -v base64)" ]; then
    base64
  else
    return 1
  fi
}

decode() {
  if [ "$(command -v openssl)" ]; then
    openssl enc -base64 -d
  elif [ "$(command -v base64)" ]; then
    base64 --decode
  else
    return 1
  fi
}

# Remove empty lines, full line comments, and leading whitespace
minify() {
  sed '/^[[:space:]]*$/d; /^[[:space:]]*#[^!]/d; /^#$/d; s/^[[:space:]]*//g'
}

# Some shells (both locally and on the remote server) will complain if a
# command is too large. Check to see if sshrc_cmd will exceed arg_max (default
# to 64kb)
check_size() {
  LC_ALL=C size="${#sshrc_cmd}"

  if [ "${show_size}" = "true" ]; then
    echo "${size} bytes"
    exit 0
  fi

  [ "${arg_max:=$(( 65 * 1024 ))}" = 0 ] && return
  if [ "${size}" -gt "${arg_max}" ]; then
    echo >&2 "Error: the compressed size of .sshrc, .sshrc.d, and the sshrc" \
      "bootstrap script is greater than 64kb"
    echo >&2 "Current size: ${size} bytes"
    exit 1
  fi
}

include_files() {
read -r -d '' encoded_files <<EOF
  # Copy over .sshrc and .sshrc.d
  echo '$(tar c -h -C "${SSHHOME}" ${files} | encode)' \
    | decode | tar mx -C "\$SSHHOME"
EOF
}

include_bin() {
read -r -d '' encoded_bin <<EOF
  # Copy sshrc binary, so we can run sshrc again from the new host
  echo '$(minify < "$0" | encode)' | decode > "\$SSHHOME/sshrc"
  chmod +x "\$SSHHOME/sshrc"
EOF
}

include_bash_wrapper() {
read -r -d '' bash_wrapper <<EOF
  # Create wrapper around bash
  echo '#!/usr/bin/env bash
  exec bash --rcfile <(echo "
    # Simulate a login shell
    [ -r /etc/profile ] && source /etc/profile
    for file in \$HOME/{.bash_profile,.bash_login,.profile}; do
      [ -r \"\$file\" ] && source \$file
    done
    export PATH=\$PATH:\$SSHHOME
    [ -r \$SSHHOME/.sshrc ] && source \$SSHHOME/.sshrc
  ") "\$@"' > "\$SSHHOME/.sshrc.d/sh"
EOF
}

include_welcome_msg() {
read -r -d '' welcome_msg <<EOF
  # Show welcome messages
  if [ ! -e "\$HOME/.hushlogin" ]; then
    if [ -e /etc/motd ]; then
      cat /etc/motd
    elif [ -e /etc/update-motd.d ]; then
      run-parts /etc/update-motd.d/ 2>/dev/null
    fi
  fi
EOF
}

# The bootstrap script creates SSHHOME, copies over .sshrc and .sshrc.d, and
# starts the shell
build_bootstrap_script() {
read -r -d '' exec_script <<EOF
  #!/usr/bin/env sh
  trap 'rm -rf \$SSHRCCLEANUP; exit' 0;
  \$SSHHOME/.sshrc.d/sh$([ -z "${cmd}" ] || echo " -c \"${cmd}\"")
EOF
read -r -d '' bootstrap <<EOF
  SSHHOME=\$(mktemp -d -t .$(whoami).sshrc.XXXXXXXX)
  SSHRCCLEANUP="\$SSHHOME"
  export SSHHOME SSHRCCLEANUP
  trap 'rm -rf \$SSHRCCLEANUP; exit' 0

  ${encoded_files-# DEBUG: Skipping transfer of .sshrc and .sshrc.d}

  mkdir -p "\$SSHHOME/.sshrc.d"

  ${encoded_bin-# DEBUG: Skipping transfer of sshrc binary}

  ${bash_wrapper-# DEBUG: Using .sshrc.d/sh as shell}

  chmod +x "\$SSHHOME/.sshrc.d/sh"

  ${welcome_msg-# DEBUG: Suppressing welcome messages}

  # Create wrapper script around our shell that handles cleaning up
  echo "${exec_script}" > "\$SSHHOME/sshrc-init"

  chmod +x "\$SSHHOME/sshrc-init"
  exec "\$SSHHOME/sshrc-init"
EOF
}

# sshrc_cmd is the remote command that sshrc passes to ssh. It is comprised of
# the compressed sshrc bootstrap script and the commands needed to decompress
# and run it. The .sshrc config file and files within .sshrc.d are embedded
# within the bootstrap script.
build_sshrc_cmd() {
read -r -d '' sshrc_cmd <<EOF
  # Bail if neither openssl nor base64 is installed on the remote host
  if [ ! "\$(command -v openssl)" ] && [ ! "\$(command -v base64)" ]; then
    echo >&2 "Error: sshrc requires openssl or base64 to be installed" \
      "on the server"
    exit 1
  fi

  # Declare encode function
  $(declare -f encode)
  $(declare -f decode)

  # Compress bootstrap script for faster initial ssh connection and reduced
  # risk of hitting command buffer length limit
  eval "\$(
  echo '$(echo "${bootstrap}" | "${archiver}" -c -9 | encode)' \
    | decode | ${archiver} -d
  )"
EOF
}

parse_opts() {
  archiver=bzip2
  bin="true"
  ssh_args=()
  [ -e "${SSHHOME}/.sshrc.d/.hushlogin" ] && hushlogin="true"

  while getopts ":h-:b:c:D:E:e:F:I:i:J:L:l:m:O:o:p:Q:R:S:W:w:" opt; do
    case "${opt}" in
      -)
        case "${OPTARG}" in
          help)
            show_help
            exit 0
            ;;
          archiver)
            archiver="${!OPTIND}"
            OPTIND=$(( OPTIND + 1 ))
            ;;
          archiver=*)
            archiver="${OPTARG#*=}"
            ;;
          arg-max)
            arg_max="${!OPTIND}"
            OPTIND=$(( OPTIND + 1 ))
            ;;
          arg-max=*)
            arg_max="${OPTARG#*=}"
            ;;
          hushlogin)
            hushlogin="true"
            ;;
          arg-size)
            show_size="true"
            ;;
          no-bin)
            bin="false"
            ;;
          debug)
            debug=1
            ;;
          debug=*)
            debug="${OPTARG#*=}"
            ;;
          *)
            if [ "$OPTERR" = 1 ]; then
              echo >&2 "Invalid option --${OPTARG}"
              show_help
            fi
            exit 1
            ;;
        esac;;
      b|c|D|E|e|F|I|i|J|L|l|m|O|o|p|Q|R|S|W|w)
        ssh_args+=("-${opt}" "${OPTARG}")
        ;;
      h)
        show_help
        exit 0
        ;;
      *)
        ssh_args+=("-${OPTARG}")
        ;;
    esac
  done
  shift $((OPTIND-1))

  host="$1"
  shift
  cmd="$*"
}

main() {
  parse_opts "$@"

  if ! [ "$(command -v openssl)" ] && ! [ "$(command -v base64)" ]; then
    echo >&2 "Error: sshrc requires openssl or base64 to be installed locally"
    exit 1
  fi

  # Look for .sshrc and .sshrc.d in current directory or $HOME
  if [ -z "${SSHHOME}" ]; then
    for SSHHOME in $PWD $HOME; do
      [ -f "${SSHHOME}/.sshrc" ] && break
    done
  fi
  [ -f "${SSHHOME}/.sshrc" ]   && files="${files} .sshrc"
  [ -d "${SSHHOME}/.sshrc.d" ] && files="${files} .sshrc.d"
  if [ -z "${files}" ]; then
    echo >&2 "Warning: running without a .sshrc file or .sshrc.d directory"
  else
    include_files
  fi

  [ "${bin}" = "true" ] && include_bin
  [ -e "${SSHHOME}/.sshrc.d/sh" ] || include_bash_wrapper
  [ -z "${cmd}" ] && [ "${hushlogin}" != "true" ] && include_welcome_msg

  build_bootstrap_script

  # Debug bootstrap script
  if [ "${debug}" = 2 ]; then
    echo "This is the script that will be used to unpack .sshrc and .sshrc.d" \
      "on the remote server and start the remote shell session:"
    echo "${bootstrap}"
    exit 0
  fi

  bootstrap=$(echo "${bootstrap}" | minify)

  build_sshrc_cmd

  # Debug sshrc_cmd
  if [ "${debug}" = 1 ]; then
    echo "This is the remote command that sshrc will pass to ssh:"
    echo "${sshrc_cmd}"
    exit 0
  fi

  sshrc_cmd=$(echo "${sshrc_cmd}" | minify)

  check_size

  ssh -t "${ssh_args[@]}" "${host}" "${sshrc_cmd}"
}

main "$@"
