#!/usr/bin/env bash

# As at 2022-01-31, taken from:
# https://raw.githubusercontent.com/taylorskalyo/sshrc/master/sshrc
# See also possible merge:  https://github.com/cdown/sshrc/issues/4

show_help() {
	cat <<-EOF | >&2 sed 's/^|//'
	|Usage: sshrc [OPTIONS] [SSH_ARGS...]
	|
	|Options:
	|  --archiver=UTILITY  Use UTILITY for compression
	|                      Default is bzip2; gzip and xz are also supported
	|  --arg-max=BYTES     Ensure SSHRC_CMD is less than BYTES in size
	|                      Default is 65536 (64kb); set to 0 to disable this check
	|  --arg-size          Print the compressed size of SSHRC_CMD in bytes and exit
	|  --hushlogin         Supress motd welcome messages
	|                      This can also be accomplished by creating a .hushlogin
	|                      file in \$SSHHOME/.sshrc.d
	|  --no-bin            Don't copy this sshrc script to the remote host
	|  --debug[=LEVEL]     Print out debug info
	|                      LEVEL 1 prints the SSHRC_CMD
	|                      LEVEL 2 prints the uncompressed bootstrap script
	|  -h, --help          Display this help message and exit
	|
	|SSH_ARGS:
	|  See ssh(1)
	EOF
}

# Use openssl or base64
encode() {
	if [ "$(command -v openssl)" ]; then
		openssl enc -base64
	elif [ "$(command -v base64)" ]; then
		base64
	else
		return 1
	fi
}

decode() {
	if [ "$(command -v openssl)" ]; then
		openssl enc -base64 -d
	elif [ "$(command -v base64)" ]; then
		base64 --decode
	else
		return 1
	fi
}

# Remove empty lines, full line comments, and leading whitespace
minify() {
	sed '/^[[:space:]]*$/d; /^[[:space:]]*#[^!]/d; /^#$/d; s/^[[:space:]]*//g'
}

# Some shells (both locally and on the remote server) will complain if a
# command is too large. Check to see if sshrc_cmd will exceed arg_max (default
# to 64kb)
check_size() {
	LC_ALL=C size="${#sshrc_cmd}"

	if [ "${show_size}" = 'true' ]; then
		echo "${size} bytes"
		exit 0
	fi

	[ "${arg_max:=$(( 65 * 1024 ))}" = 0 ] && return
	if [ "${size}" -gt "${arg_max}" ]; then
		echo >&2 'Error: arg-size exceeds arg-max'
		echo >&2 "Current size: ${size} bytes; Max: ${arg_max} bytes"
		exit 1
	fi
}

include_files() {
	echo taring: "${SSHHOME}" "${files[@]}"
	_encoded_files=$(tar c -h -C "${SSHHOME}" "${files[@]}" | encode)
	read -r -d '' encoded_files <<-EOF
	# Copy over .sshrc and .sshrc.d
	echo '${_encoded_files}' | decode | tar mx -C "\$SSHHOME"
	EOF
	echo end include files
}

include_bin() {
	echo "$0" intoupto minify
	_encoded_bin=$(minify < "$0" | encode)
	echo 0.1
	read -r -d '' encoded_bin <<-EOF
	# Copy sshrc binary, so we can run sshrc again from the new host
	echo '${_encoded_bin}' | decode > "\$SSHHOME/sshrc"
	chmod +x "\$SSHHOME/sshrc"
	EOF
}

include_bash_wrapper() {
	read -r -d '' bashrc <<-EOF
	# Simulate a login shell
	[ -r /etc/profile ] && source /etc/profile
	for file in \$HOME/{.bash_profile,.bash_login,.profile}; do
		[ -r \"\$file\" ] && source \$file && break
	done
	export PATH=\$PATH:\$SSHHOME
    echo source rc_file: "$rc_file".
	# [ -r \$SSHHOME/\$rc_file ] && source \$SSHHOME/\$rc_file
	[ -r \$SSHHOME/\$rc_file ] && echo source \$SSHHOME/$rc_file && source \$SSHHOME/$rc_file
	EOF

	read -r -d '' sh_file <<-EOF
	#!/usr/bin/env bash
	exec bash --rcfile <(
	cat <<'BASHRC'
	${bashrc}
	BASHRC
	) "\$@"
	EOF

	read -r -d '' bash_wrapper <<-EOF
	# Create wrapper around bash
	cat <<'SHFILE' > "\$SSHHOME/\$dir/sh"
	${sh_file}
	SHFILE
	EOF

	echo sh_file:
	echo "$sh_file"
	echo --- END ---

	echo bash_wrapper:
	echo "$bash_wrapper"
	echo --- END ---
	echo end bash wrapper
}

include_welcome_msg() {
	read -r -d '' welcome_msg <<-EOF
	# Show welcome messages
	if [ ! -e "\$HOME/.hushlogin" ]; then
		if [ -e /etc/motd ]; then
			cat /etc/motd
		elif [ -e /etc/update-motd.d ]; then
			run-parts /etc/update-motd.d/ 2>/dev/null
		fi
	fi
	EOF
}

# The bootstrap script creates SSHHOME, copies over .sshrc and .sshrc.d, and
# starts the shell
build_bootstrap_script() {
	read -r -d '' exec_script <<-EOF
	trap 'chmod -R +w \$SSHRCCLEANUP; rm -rf \$SSHRCCLEANUP; exit' 0;
	\$SSHHOME/\$dir/sh$([ -z "${cmd}" ] || echo " -c \"${cmd}\"")
	EOF

	read -r -d '' bootstrap <<-EOF
	SSHHOME=\$(mktemp -d -t .$(whoami).sshrc.XXXXXXXX)
	SSHRCCLEANUP="\$SSHHOME"
	export SSHHOME SSHRCCLEANUP
	trap 'chmod -R +w \$SSHRCCLEANUP; rm -rf \$SSHRCCLEANUP; exit' 0

	${encoded_files-# DEBUG: Skipping transfer of $rc_file and $dir}

	mkdir -p "\$SSHHOME/\$dir"

	${encoded_bin-# DEBUG: Skipping transfer of sshrc binary}

	${bash_wrapper-# DEBUG: Using $dir/sh as shell}

	chmod +x "\$SSHHOME/\$dir/sh"

	${welcome_msg-# DEBUG: Suppressing welcome messages}

	# Create wrapper script around our shell that handles cleaning up
	exec /usr/bin/env sh <(echo "${exec_script}")
	EOF
}

# sshrc_cmd is the remote command that sshrc passes to ssh. It is comprised of
# the compressed sshrc bootstrap script and the commands needed to decompress
# and run it. The .sshrc config file and files within .sshrc.d are embedded
# within the bootstrap script.
build_sshrc_cmd() {
	_encoded_bootstrap=$(echo "${bootstrap}" | "${archiver}" -c -9 | encode)
	read -r -d '' sshrc_cmd <<-EOF
	# Bail if neither openssl nor base64 is installed on the remote host
	if [ ! "\$(command -v openssl)" ] && [ ! "\$(command -v base64)" ]; then
		echo >&2 'Error: sshrc requires openssl or base64 to be installed remotely'
		exit 1
	fi

	# Bail if the chosen archiver is not installed on the remote host
	if [ ! "\$(command -v ${archiver})" ]; then
		echo >&2 'Error: ${archiver} is not installed remotely'
		echo >&2 'Use the --archiver flag to specify a different archive utility'
		exit 1
	fi

	# Declare encode function
	$(declare -f encode)
	$(declare -f decode)

	# Compress bootstrap script for faster initial ssh connection and reduced
	# risk of hitting command buffer length limit
	eval "\$(echo '${_encoded_bootstrap}' | decode | ${archiver} -d)"
	EOF
}

parse_opts() {
	bin='true'
	ssh_args=()
	[[ -e "${SSHHOME}/$dir/hushlogin" || -e "${SSHHOME}/$dir/.hushlogin" ]] && hushlogin='true'

	while getopts ':h-:b:c:D:E:e:F:I:i:J:L:l:m:O:o:p:Q:R:S:W:w:' opt; do
		case "${opt}" in
			-)
				case "${OPTARG}" in
					help)
						show_help
						exit 0
						;;
					archiver)
						archiver="${!OPTIND}"
						OPTIND=$(( OPTIND + 1 ))
						;;
					archiver=*)
						archiver="${OPTARG#*=}"
						;;
					arg-max)
						arg_max="${!OPTIND}"
						OPTIND=$(( OPTIND + 1 ))
						;;
					arg-max=*)
						arg_max="${OPTARG#*=}"
						;;
					hushlogin)
						hushlogin='true'
						;;
					arg-size)
						show_size='true'
						;;
					no-bin)
						bin='false'
						;;
					debug)
						debug=1
						;;
					debug=*)
						debug="${OPTARG#*=}"
						;;
					*)
						if [ "$OPTERR" = 1 ]; then
							echo >&2 "Invalid option --${OPTARG}"
							show_help
						fi
						exit 1
						;;
				esac;;
			b|c|D|E|e|F|I|i|J|L|l|m|O|o|p|Q|R|S|W|w)
				ssh_args+=("-${opt}" "${OPTARG}")
				;;
			h)
				show_help
				exit 0
				;;
			*)
				ssh_args+=("-${OPTARG}")
				;;
		esac
	done
	shift $((OPTIND-1))

	if [ -z "${archiver}" ]; then
		for archiver in bzip2 gzip xz; do
			[ "$(command -v "${archiver}")" ] && break
		done
	fi
	if ! [ "$(command -v "${archiver}")" ]; then
		echo >&2 'Error: could not find a suitable archive utility'
		exit 1
	fi

	host="$1"
	shift
	cmd="$*"
}

main() {
	parse_opts "$@"

	if ! [ "$(command -v openssl)" ] && ! [ "$(command -v base64)" ]; then
		echo >&2 'Error: sshrc requires openssl or base64 to be installed locally'
		exit 1
	fi

	# Set $XDG_CONFIG_HOME if unset (eg Ubuntu 14.04 LTS)
	# See https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
	# and https://wiki.archlinux.org/index.php/XDG_Base_Directory_support
	XDG_CONFIG_HOME=${XDG_CONFIG_HOME:=$HOME/.config}

	# Look for .sshrc and .sshrc.d in current directory or $HOME XXX
	if [ -z "${SSHHOME}" ]; then
		for SSHHOME in "${XDG_CONFIG_HOME:-$HOME/.config}/sshrc" "$PWD" "$HOME"; do
			[[ -f "$SSHHOME"/rc || -f "$SSHHOME"/.sshrc ]] && break  # Find first dir with rc file
		done
	fi

	echo SSHHOME="$SSHHOME"

	if [ -f "$SSHHOME"/rc ]; then
		rc_file=rc   files=(rc)
	elif [ -f "$SSHHOME"/.sshrc ]; then
		rc_file=.sshrc  files=(.sshrc)
	fi
	if [ -d "$SSHHOME"/sshrc.d ]; then
		files+=(sshrc.d)   dir=sshrc.d
	elif [ -d "$SSHHOME"/.sshrc.d ]; then
		files+=(.sshrc.d)  dir=.sshrc.d
	fi

	echo got files: "${files[@]}"

	if [ "${#files[@]}" -eq 0 ]; then
		echo >&2 'Warning: running without a sshrc file or sshrc.d directory'
	else
		include_files
	fi

	echo 0
	[ "${bin}" = 'true' ] && include_bin
	echo 1
	[ -e "${SSHHOME}/${dir}/sh" ] || include_bash_wrapper
	echo 2
	[ -z "${cmd}" ] && [ "${hushlogin}" != 'true' ] && include_welcome_msg
	echo 3

	build_bootstrap_script

	# Debug bootstrap script
	if [ "${debug}" = 2 ]; then
		echo >&2 '----- BEGIN BOOTSTRAP SCRIPT -----'
		echo "${bootstrap}"
		echo >&2 '----- END BOOTSTRAP SCRIPT -----'
		exit 0
	fi

	bootstrap=$(echo "${bootstrap}" | minify)

	build_sshrc_cmd

	# Debug sshrc_cmd
	if [ "${debug}" = 1 ]; then
		echo >&2 '----- BEGIN SSH COMMAND -----'
		echo "${sshrc_cmd}"
		echo >&2 '----- END SSH COMMAND -----'
		exit 0
	fi

	sshrc_cmd=$(echo "${sshrc_cmd}" | minify)

	check_size

	# shellcheck disable=SC2029
	echo ssh -t "${ssh_args[@]}" "${host}" "<sshrccmd>"
	ssh -t "${ssh_args[@]}" "${host}" "${sshrc_cmd}"
}

main "$@"
